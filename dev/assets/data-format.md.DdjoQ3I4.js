import{_ as t,c as e,o as a,a7 as o}from"./chunks/framework.BxKEkBHO.js";const f=JSON.parse('{"title":"Data Format","description":"","frontmatter":{},"headers":[],"relativePath":"data-format.md","filePath":"data-format.md","lastUpdated":null}'),r={name:"data-format.md"},d=o('<h1 id="Data-Format" tabindex="-1">Data Format <a class="header-anchor" href="#Data-Format" aria-label="Permalink to &quot;Data Format {#Data-Format}&quot;">​</a></h1><p>DGGS.jl stores data of individual DGGS cells in rasters, in which the cell ids can be calculated by row and column numbers.</p><h2 id="Projection" tabindex="-1">Projection <a class="header-anchor" href="#Projection" aria-label="Permalink to &quot;Projection {#Projection}&quot;">​</a></h2><p>Geographical coordinates are first projected into a plane using Snyder equal-area projection, followed by a linear transformation, yielding a tesselation of the earth surface into 5 matrices. The transformed coordinates are then adjusted downward to get the final discrete cell ids as (i,j,n) tuples at row 0&lt;=i&lt;=2*2^r, column 0&lt;=i&lt;=2^r, and matrix 0&lt;=n&lt;=4&gt;. Moreover, the cell id can be re-interpreted as a single integer, by concatenating the bits of the individual axial coordinates. The refinement level r determines the spatial resolution, halving the width and length of the 5 matrices in each subsequent coarser levels. The final DGGS in an image pyramid of datasets at a given refinement level and all coarser levels.</p><img src="https://github.com/danlooo/DGGS.jl/raw/main/docs/src/assets/pentacube-overview.png" alt=""><h2 id="Data-Format-2" tabindex="-1">Data Format <a class="header-anchor" href="#Data-Format-2" aria-label="Permalink to &quot;Data Format {#Data-Format-2}&quot;">​</a></h2><p>The data is stored according to the <a href="https://docs.unidata.ucar.edu/netcdf-c/current/netcdf_data_model.html" target="_blank" rel="noreferrer">Unidata&#39;s Common Data Model (CDM)</a> using <a href="https://cfconventions.org/" target="_blank" rel="noreferrer">CF Metadata Conventions</a> by extending attributes and dimensions with the prefix <code>dggs_</code>. An example in Zarr forma is provided at <a href="https://github.com/danlooo/blue-marble.dggs.zarr" target="_blank" rel="noreferrer">https://github.com/danlooo/blue-marble.dggs.zarr</a>. The root group contains a group for all spatial refinement levels (dataset) that contain all variables (arrays) for variables and dimensions at the given level. Each dataset MUST contain spatial dimensions <code>dggs_i</code>, <code>dggs_j</code>, and <code>dggs_n</code>.</p><h2 id="Meta-Data" tabindex="-1">Meta Data <a class="header-anchor" href="#Meta-Data" aria-label="Permalink to &quot;Meta Data {#Meta-Data}&quot;">​</a></h2><p>Attributes used to descirbe the DGGS:</p><table tabindex="0"><thead><tr><th style="text-align:right;">key</th><th style="text-align:right;">format</th><th style="text-align:right;">example</th><th style="text-align:right;">description</th></tr></thead><tbody><tr><td style="text-align:right;">dggs_resolution</td><td style="text-align:right;">int</td><td style="text-align:right;">2</td><td style="text-align:right;">Spatial refinement level defined by the given DGGSRS</td></tr><tr><td style="text-align:right;">dggs_bbox</td><td style="text-align:right;"><code>{&quot;X&quot;:[float,float],&quot;Y&quot;:[float,float]}</code></td><td style="text-align:right;"><code>{&quot;X&quot;:[-180.0,180.0],&quot;Y&quot;:[-90.0,90.0]}</code></td><td style="text-align:right;">Bounding box of the data in WGS84</td></tr><tr><td style="text-align:right;">dggs_dggsrs</td><td style="text-align:right;">string</td><td style="text-align:right;">&quot;ISEA4D.Penta&quot;</td><td style="text-align:right;">Name of DGGSRS</td></tr></tbody></table><p>The root group <code>/</code> MUST contain attributes <code>dggs_bbox</code> and <code>dggs_dggsrs</code>. Dataset groups <code>/dggs_s{r}</code> MUST contain attributes <code>dggs_dggsrs</code> and <code>dggs_resolution</code>. Arrays <code>/dggs_s{r}/{array_name}</code> MUST contain attributes <code>dggs_bbox</code>, <code>dggs_dggsrs</code>, and <code>dggs_resolution</code>.</p>',11),n=[d];function i(s,l,c,g,h,m){return a(),e("div",null,n)}const b=t(r,[["render",i]]);export{f as __pageData,b as default};
