var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"Modules = [DGGS]","category":"page"},{"location":"api/#DGGS.PresetGridSpecs","page":"API","title":"DGGS.PresetGridSpecs","text":"DGGRID grid presets\n\n\n\n\n\n","category":"constant"},{"location":"api/#DGGS.Grid","page":"API","title":"DGGS.Grid","text":"A grid as defined by DGGRID with the actual grid points\n\n\n\n\n\n","category":"type"},{"location":"api/#DGGS.Grid-Tuple{String, Int64, String, Int64}","page":"API","title":"DGGS.Grid","text":"Create a grid using DGGRID parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.Grid-Tuple{String}","page":"API","title":"DGGS.Grid","text":"Create a grid using DGGRID preset\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.GridSpec","page":"API","title":"DGGS.GridSpec","text":"Specification of a grid as defined by DGGRID\n\n\n\n\n\n","category":"type"},{"location":"api/#DGGS.call_dggrid-Tuple{Dict}","page":"API","title":"DGGS.call_dggrid","text":"Execute sytem call of DGGRID binary\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.create_grids-Tuple{String, Int64, String, Int64}","page":"API","title":"DGGS.create_grids","text":"Create a grid system of different resolutions\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_cell_boundaries-Tuple{GridSpec}","page":"API","title":"DGGS.get_cell_boundaries","text":"Get a GeoDataFrame with boundary polygons for each cell\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_cell_cube-Tuple{Grid, YAXArrays.Cubes.YAXArray}","page":"API","title":"DGGS.get_cell_cube","text":"Import geographical data cube into a DGGS\n\nTransforms a data cube with spatial index dimensions longitude and latitude into a data cube with the cell id as a single spatial index dimension. Re-gridding is done using the average value of all geographical coordinates belonging to a particular cell defined by the grid specification grid_spec.\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_cell_ids-Tuple{Grid, Union{Number, AbstractVector}, Union{Number, AbstractVector}}","page":"API","title":"DGGS.get_cell_ids","text":"Get cell ids given geographic corrdinates\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_children_cell_ids-Tuple{Vector{Grid}, Int64, Int64}","page":"API","title":"DGGS.get_children_cell_ids","text":"Get ids of all child cells\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_cube_pyramid-Tuple{Vector{Grid}, YAXArrays.Cubes.YAXArray}","page":"API","title":"DGGS.get_cube_pyramid","text":"Get a cell data cube pyramid\n\nCalculates a stack of cell data cubes with incrementally lower resolutions based on the same data as provided by cell_cube. Cell values are combined according to the provided aggregate_function.\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_geo_coords-Tuple{Grid, Int64}","page":"API","title":"DGGS.get_geo_coords","text":"Convert cell id to geographic coordinate of cell center\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_geo_cube-Tuple{Grid, YAXArrays.Cubes.YAXArray}","page":"API","title":"DGGS.get_geo_cube","text":"Export cell data cube into a traditional geographical one\n\nTransforms a data cube with one spatial index dimensions, i. e., the cell id, into a traditional geographical data cube with two spatial index dimensions longitude and latitude. Values are taken from the nearest cell.\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_grid_data-Tuple{GridSpec}","page":"API","title":"DGGS.get_grid_data","text":"Get a DataFrame of cell center points\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_kd_tree-Tuple{DataFrames.DataFrame}","page":"API","title":"DGGS.get_kd_tree","text":"represent cell table as kd-tree of center points\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_parent_cell_id-Tuple{Vector{Grid}, Int64, Int64}","page":"API","title":"DGGS.get_parent_cell_id","text":"Get id of parent cell\n\n\n\n\n\n","category":"method"},{"location":"background/#The-background-behind-Discrete-Global-Grid-Systems-(DGGS)","page":"Background","title":"The background behind Discrete Global Grid Systems (DGGS)","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"A Discrete Global Grid Systems (DGGS) tessellate the surface of the earth with hierarchical cells of equal area. This minimizes distortion and loading time of large geospatial datasets, which is crucial in spatial statistics and building Machine Learning models.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DGGS","category":"page"},{"location":"#DGGS.jl:-A-Discrete-Global-Grid-System-for-Julia","page":"Home","title":"DGGS.jl: A Discrete Global Grid System for Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DGGS.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DGGS.jl is a Julia Package for scalable geospatial analysis using Discrete Global Grid Systems (DGGS), which tessellate the surface of the earth with hierarchical cells of equal area, minimizing distortion and loading time of large geospatial datasets, which is crucial in spatial statistics and building Machine Learning models.","category":"page"},{"location":"#Get-Started","page":"Home","title":"Get Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install DGGS.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"DGGS\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create a simple grid:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DGGS\ngrid = create_toy_grid()","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Create-a-Discrete-Global-Grid-System-(DGGS)","page":"Tutorial","title":"Create a Discrete Global Grid System (DGGS)","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a data cube in geographical coordinates:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using YAXArrays\nlon_range = -180:180\nlat_range = -90:90\ndata = [exp(cosd(lon)) + 3(lat / 90) for lon in lon_range, lat in lat_range]\naxlist = [\n    RangeAxis(\"lon\", lon_range),\n    RangeAxis(\"lat\", lat_range)\n]\ngeo_cube = YAXArray(axlist, data)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's create a DGGS using Synder Equal Area projection (\"ISEA\"), an aperture of 4 (number of child cells of a given parent cell), a hexagonal grid shape at 3 different resolutions:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DGGS\ndggs = GridSystem(geo_cube, \"ISEA\", 4, \"HEXAGON\", 3)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The data cube at the highest resolution has only one spatial index dimension, i.e. the cell id:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"get_cell_cube(dggs, 3)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Plotting requires re-griding to geographical coordinates:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CairoMakie\nusing GeoMakie\ndggs_geo_cube = get_geo_cube(dggs, 3)\nfig = Figure(resolution=(1000, 1000))\nga1 = GeoAxis(fig[1, 1]; dest=\"+proj=ortho\", coastlines=true, lonlims=(-90, 90))\nsurface!(ga1, lon_range, lat_range, dggs_geo_cube.data; colormap=:rainbow_bgyrm_35_85_c69_n256, shading=false)\nfig","category":"page"},{"location":"tutorial/#Explore-the-grid","page":"Tutorial","title":"Explore the grid","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's create our first grid from a preset:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DGGS\ngrid = create_toy_grid()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a data frame containing the center point or boundary polygon for all cells of the grid:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"boundaries = get_cell_boundaries(grid)\ncenters = get_cell_centers(grid)\n\nprintln(boundaries[1:5,:])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The data frames can be saved e.g. as geojson to be used in other tools like GIS:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using GeoDataFrames\nGeoDataFrames.write(\"boundaries.geojson\", boundaries)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Convert points between cell id and geographic coordinates:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"get_cell_ids(grid, 80, -170)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and vice versa:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"get_geo_coords(grid, 5)","category":"page"},{"location":"tutorial/#Convert-a-data-cube","page":"Tutorial","title":"Convert a data cube","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A data cube is an n-dimensional array in which we have a value for each possible combination of indices, e.g., a temperature value for each geographical coordinate and also for each time point. Here, YAXArrays is used to represent the data cube.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a data cube with geographical coordinates using YAXArrays:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using YAXArrays, NetCDF\nusing Downloads\nurl = \"https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc\"\nfilename = Downloads.download(url, \"tos_O1_2001-2002.nc\") # you pick your own path\ngeo_cube = Cube(filename)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Indeed, we have both longitude and latitude as spatial index dimensions. Now we can define a grid and create a new data cube cell_cube having just the cell id as a single spatial index dimension in accordance to the created grid:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DGGS\ngrid = Grid(\"ISEA\", 4, \"HEXAGON\", 3)\ncell_cube = get_cell_cube(grid, geo_cube; latitude_name=\"lat\", longitude_name=\"lon\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Vice versa, we can also transform a cell cube back to a geographical one:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"geo_cube_2 = get_geo_cube(grid, cell_cube)","category":"page"},{"location":"tutorial/#Plot-a-cell-data-cube","page":"Tutorial","title":"Plot a cell data cube","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The cell data cube can be visualized with the cells plotted as a choropleth map. Cell boundaries can be drawn as shapes. Lets start by importing a cell data cube from a NetCDF file:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# create the grid\nusing DGGS\ngrid = create_toy_grid()\nboundaries = get_cell_boundaries(grid)\n\n# create the cell cube\nusing YAXArrays, NetCDF\nusing Downloads\nurl = \"https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc\"\nfilename = Downloads.download(url, \"tos_O1_2001-2002.nc\") # you pick your own path\ngeo_cube = Cube(filename)\ncell_cube = get_cell_cube(grid, geo_cube; latitude_name=\"lat\", longitude_name=\"lon\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now we can export the cell boundary polygons and use GeoMakie for plotting:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using GeoDataFrames, GeoJSON, GeoMakie, CairoMakie\n\nboundaries_path = \"boundaries.geojson\"\nGeoDataFrames.write(boundaries_path, boundaries)\nboundaries_fc = GeoJSON.read(read(boundaries_path))\n\nfig = Figure(resolution = (1200,800), fontsize = 22)\n\nax = GeoAxis(\n    fig[1,1];\n    dest = \"+proj=wintri\",\n    title = \"DGGS\",\n    tellheight = true,\n)\n\nhm2 = poly!(\n    ax, boundaries_fc;\n    color = cell_cube.data,\n    colormap = Reverse(:plasma),\n    strokecolor = :blue,\n    strokewidth = 0.25\n)\nfig","category":"page"}]
}
