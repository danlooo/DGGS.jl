var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"Modules = [DGGS]","category":"page"},{"location":"api/#DGGS.AbstractGrid","page":"API","title":"DGGS.AbstractGrid","text":"A set of points defining a grid as a voronoi partition.  Points must be geographical coordinates (lon, lat) and stored as a KDTree in the filed data.\n\n\n\n\n\n","category":"type"},{"location":"api/#DGGS.CellCube-Tuple{GeoCube, DGGS.AbstractGrid}","page":"API","title":"DGGS.CellCube","text":"Import geographical data cube into a DGGS\n\nTransforms a data cube with spatial index dimensions longitude and latitude into a data cube with the cell id as a single spatial index dimension. Re-gridding is done using the average value of all geographical coordinates belonging to a particular cell defined by the grid specification grid_spec.\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.DgGrid-Tuple{Symbol, Int64, Symbol, Int64}","page":"API","title":"DGGS.DgGrid","text":"Create a grid using DGGRID parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.GeoCube-Tuple{CellCube}","page":"API","title":"DGGS.GeoCube","text":"Export cell data cube into a traditional geographical one\n\nTransforms a data cube with one spatial index dimensions, i. e., the cell id, into a traditional geographical data cube with two spatial index dimensions longitude and latitude. Values are taken from the nearest cell.\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.Grid-Tuple{AbstractMatrix{<:Number}}","page":"API","title":"DGGS.Grid","text":"Create a Grid using coordinates of center points describing a voronoi partition. center_points must have one point per column with 2 rows for longitude and latitude, respectiveley.\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.call_dggrid-Tuple{Dict}","page":"API","title":"DGGS.call_dggrid","text":"Execute sytem call of DGGRID binary\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_cell_ids-Tuple{DGGS.AbstractGrid, Union{Number, AbstractVector}, Union{Number, AbstractVector}}","page":"API","title":"DGGS.get_cell_ids","text":"Get cell ids given geographic corrdinates\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_children_cell_ids-Tuple{Vector{<:DGGS.AbstractGrid}, Int64, Int64}","page":"API","title":"DGGS.get_children_cell_ids","text":"Get ids of all child cells\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_cube_pyramid-Tuple{Vector{<:DGGS.AbstractGrid}, CellCube}","page":"API","title":"DGGS.get_cube_pyramid","text":"Get a cell data cube pyramid\n\nCalculates a stack of cell data cubes with incrementally lower levels based on the same data as provided by cell_cube. Cell values are combined according to the provided aggregate_function.\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_dggrid_cell_boundaries-Tuple{Symbol, Symbol, Int64}","page":"API","title":"DGGS.get_dggrid_cell_boundaries","text":"Get a GeoDataFrame with boundary polygons for each cell\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_dggrid_grid_table-Tuple{Symbol, Symbol, Int64}","page":"API","title":"DGGS.get_dggrid_grid_table","text":"Get a DataFrame of cell center points\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_geo_coords-Tuple{DGGS.AbstractGrid, AbstractVector}","page":"API","title":"DGGS.get_geo_coords","text":"Convert cell id to geographic coordinate of cell center\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_geo_coords-Tuple{DGGS.AbstractGrid, Int64}","page":"API","title":"DGGS.get_geo_coords","text":"Convert cell id to geographic coordinate of cell center\n\n\n\n\n\n","category":"method"},{"location":"api/#DGGS.get_parent_cell_id-Tuple{Vector{<:DGGS.AbstractGrid}, Int64, Int64}","page":"API","title":"DGGS.get_parent_cell_id","text":"Get id of parent cell\n\n\n\n\n\n","category":"method"},{"location":"background/#The-background-behind-Discrete-Global-Grid-Systems-(DGGS)","page":"Background","title":"The background behind Discrete Global Grid Systems (DGGS)","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"A Discrete Global Grid Systems (DGGS) tessellate the surface of the earth with hierarchical cells of equal area. This minimizes distortion and loading time of large geospatial datasets, which is crucial in spatial statistics and building Machine Learning models.","category":"page"},{"location":"background/#Why-to-use-a-DGGS","page":"Background","title":"Why to use a DGGS","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"multi resolutions\nchunking and compression\nspherical properties\nequal area","category":"page"},{"location":"background/#DGGS-Creation","page":"Background","title":"DGGS Creation","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Take a platonic solid (e.g. icosahedron)\nBlow it up so that it s size fits the radius of the earth\nChose a rotation of the polyhedron relative to the  (e.g. those used in the Dymaxion projection so that the evrtices of the polyhedrons with high distortions are in the oceans)\nTessellate the faces of the polyhedron (e.g. triangles, diamonds, or hexagons). One must introduce 12 pentagons at the vertices of the polyhedron to enable a tesselation of the 3D surface with hexagons.\nRedo the tessellation with increasing resolutions forming a grid system","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: ) By Justin Kunimune - Own work, Public Domain, https://commons.wikimedia.org/w/index.php?curid=65694588","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: )","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DGGS","category":"page"},{"location":"#DGGS.jl:-A-Discrete-Global-Grid-System-for-Julia","page":"Home","title":"DGGS.jl: A Discrete Global Grid System for Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DGGS.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DGGS.jl is a Julia Package for scalable geospatial analysis using Discrete Global Grid Systems (DGGS), which tessellate the surface of the earth with hierarchical cells of equal area, minimizing distortion and loading time of large geospatial datasets, which is crucial in spatial statistics and building Machine Learning models.","category":"page"},{"location":"#Get-Started","page":"Home","title":"Get Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install DGGS.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"DGGS\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create a simple grid:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DGGS\ngrid = create_toy_grid()","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Create-a-Discrete-Global-Grid-System-(DGGS)","page":"Tutorial","title":"Create a Discrete Global Grid System (DGGS)","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a data cube in geographical coordinates:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DGGS\nlon_range = -180:180\nlat_range = -90:90\ndata = [exp(cosd(lon)) + 3(lat / 90) for lon in lon_range, lat in lat_range]\ngeo_cube = GeoCube(data, lat_range, lon_range)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CairoMakie\nplot_map(geo_cube)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's create a DGGS using Synder Equal Area projection (ISEA), an aperture of 4 (number of child cells of a given parent cell), a hexagonal grid shape at 3 different levels:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"dggs = DgGlobalGridSystem(geo_cube, 3, :isea, 4, :hexagon)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The data cube at the highest level has only one spatial index dimension, i.e. the cell id:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Plot the DGGS at a given level","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plot_map(dggs[3])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A DGGS cell represent all points within its boundary polygon. This acts as a pooling mechanism. The hexagonal topology is easily recognizable at this low level.","category":"page"},{"location":"tutorial/#Create-grids","page":"Tutorial","title":"Create grids","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Using DGGRID:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DGGS\ngrid1 = DgGrid(:isea, 4, :hexagon, 3)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Using a vector of geographical coordinates for center points:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"center_points = [-170 -80; -165.12 81.12; -160 90]\ngrid2 = Grid(center_points')","category":"page"},{"location":"tutorial/#Explore-the-grid","page":"Tutorial","title":"Explore the grid","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A DGGS consists of multiple grids with varying levels. Let's create our first grid to explore its properties:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DGGS\ngrid = DgGrid(:isea, 4, :hexagon, 3)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a data frame containing the center point or boundary polygon for all cells of the grid:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"boundaries = get_cell_boundaries(grid)\ncenters = get_cell_centers(grid)\n\nprintln(boundaries[1:5,:])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The data frames can be saved e.g. as geojson to be used in other tools like GIS:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using GeoDataFrames\nGeoDataFrames.write(\"boundaries.geojson\", boundaries)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Convert points between cell id and geographic coordinates:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"get_cell_ids(grid, 80, -170)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and vice versa:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"get_geo_coords(grid, 5)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The coordinates may differ slightly, because a cell covers all points of a given area and only the center point is returned. This tutorial uses very low levels to demonstrate the properties of a DGGS. In practice, much higher level levels should be chosen for spatial analysis, diminishing these inaccuracies.","category":"page"},{"location":"tutorial/#Import-NetCDF-files-into-a-DGGS","page":"Tutorial","title":"Import NetCDF files into a DGGS","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we will import data with a geographical grid into a DGGS. Here we will explore Sea surface temperatures collected by PCMDI for use by the IPCC stored in a NetCDF file. First, we need to create a geographical data cube.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a data cube with geographical coordinates using YAXArrays:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using YAXArrays\nusing NetCDF\nusing Downloads\nurl = \"https://www.unidata.ucar.edu/software/netcdf/examples/tos_O1_2001-2002.nc\"\nfilename = Downloads.download(url, \"tos_O1_2001-2002.nc\")\ngeo_cube_raw = YAXArrays.Cube(\"tos_O1_2001-2002.nc\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Lets have a look at the first time point of the raw data:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using CairoMakie\nheatmap(geo_cube_raw[:,:,1])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The map is centered at the Pacific Ocean and has longitudes ranging from ~0° to ~365°. We need to convert the map into a null meridian centric one with longitudes ranging from -180° to 180°. One pixel represent 2° of the longitudinal axis, because there are 180 elements. Therefore, we need to shift the data matrix by 180/2=90 pixels.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DGGS\ndata = circshift(geo_cube_raw[:,:,1], 90)\nlatitudes = geo_cube_raw.lat\nlongitudes = geo_cube_raw.lon .- 180\ngeo_cube = GeoCube(data, latitudes, longitudes)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Plot the imported geo data cube:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plot_map(geo_cube)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Transform it into a DGGS:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"dggs = DgGlobalGridSystem(geo_cube, 3, :isea, 4, :hexagon)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plot_map(dggs[3])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Since this dataset is about ocean temperature, we do not have cells on the land area.","category":"page"}]
}
